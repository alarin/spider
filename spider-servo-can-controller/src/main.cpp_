#include <stdlib.h>
#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/gpio.h"
#include "esp_log.h"
#include "driver/twai.h"

extern "C" {
    void app_main(void);
}

#define CAN_TX_PIN GPIO_NUM_20  // Default CAN TX pin
#define CAN_RX_PIN GPIO_NUM_21 // Default CAN RX pin

static const char *TAG = "SPIDER_MAIN_CONTROLLER";

void app_main() {
    
    vTaskDelay(5000 / portTICK_PERIOD_MS);

    // Initialize TWAI (CAN) driver
    twai_general_config_t g_config = TWAI_GENERAL_CONFIG_DEFAULT(CAN_TX_PIN, CAN_RX_PIN, TWAI_MODE_NO_ACK);
    twai_timing_config_t t_config = TWAI_TIMING_CONFIG_500KBITS(); // 500kbps (common CAN speed)
    twai_filter_config_t f_config = TWAI_FILTER_CONFIG_ACCEPT_ALL();
    // g_config.tx_queue_len = 1;
    g_config.alerts_enabled = TWAI_ALERT_ALL;
    // Install & start CAN driver
    if (twai_driver_install(&g_config, &t_config, &f_config) == ESP_OK) {
        ESP_LOGI(TAG, "CAN Driver installed");
    } else {
        ESP_LOGE(TAG, "Failed to install CAN driver");
        return;
    }

    if (twai_start() == ESP_OK) {
        ESP_LOGI(TAG, "CAN started");
    } else {
        ESP_LOGE(TAG, "Failed to start CAN");
        return;
    }
    uint32_t alerts_triggered;

    while (1) { 
          // SEND a CAN message every 1 second
        twai_message_t tx_msg;
        tx_msg.identifier = 0x123;  // CAN ID (11-bit)
        tx_msg.data_length_code = 4; // Data length (max 8 bytes)
        tx_msg.data[0] = 0xDE;
        tx_msg.data[1] = 0xAD;
        tx_msg.data[2] = 0xBE;
        tx_msg.data[3] = 0xEF;
        tx_msg.flags = TWAI_MSG_FLAG_SELF;

        esp_err_t result = twai_transmit(&tx_msg, pdMS_TO_TICKS(1000));
        if (result == ESP_OK) {
            ESP_LOGI(TAG, "CAN message sent");
        } else {
            twai_read_alerts(&alerts_triggered, pdMS_TO_TICKS(2000));
            ESP_LOGE(TAG, "Failed to queue message for transmission alert 0x%lX, status 0x%X %s\n", alerts_triggered , result, esp_err_to_name(result));

            if (alerts_triggered & TWAI_ALERT_BUS_OFF) {
                ESP_LOGE("TWAI", "BUS-OFF state! Initiating recovery...");
                twai_initiate_recovery(); // Trigger hardware recovery
            }
            if (alerts_triggered & TWAI_ALERT_ERR_PASS) 
                ESP_LOGW("TWAI", "Error Passive state");
            if (alerts_triggered & TWAI_ALERT_BUS_ERROR) 
                ESP_LOGW("TWAI", "Bus error (bit/CRC/stuff error)");
            if (alerts_triggered & TWAI_ALERT_ABOVE_ERR_WARN) 
                ESP_LOGW("TWAI", "Error count > warning limit (96)");
            if (alerts_triggered & TWAI_ALERT_TX_FAILED) 
                ESP_LOGE("TWAI", "Transmit failed (arbitration lost or no ACK)");        


            // if (alerts_triggered & TWAI_ALERT_BUS_OFF) {
            //     ESP_LOGE("TWAI", "BUS-OFF state! Initiating recovery...");
            //     twai_initiate_recovery(); // Trigger hardware recovery
            // }
        }

//            RECEIVE CAN messages (non-blocking)
            twai_message_t rx_msg;
            if (twai_receive(&rx_msg, pdMS_TO_TICKS(5000)) == ESP_OK) {
                ESP_LOGI(TAG, "Received CAN ID: 0x%lx", rx_msg.identifier);
                ESP_LOG_BUFFER_HEX(TAG, rx_msg.data, rx_msg.data_length_code);
            }

        
        // if (twai_read_alerts(&alerts, pdMS_TO_TICKS(1000)) == ESP_OK) {
        //     if (alerts & TWAI_ALERT_BUS_OFF) {
        //         ESP_LOGE("TWAI", "BUS-OFF state! Initiating recovery...");
        //         twai_initiate_recovery(); // Trigger hardware recovery
        //     }
        //     if (alerts & TWAI_ALERT_ERR_PASS) 
        //         ESP_LOGW("TWAI", "Error Passive state");
        //     if (alerts & TWAI_ALERT_BUS_ERROR) 
        //         ESP_LOGW("TWAI", "Bus error (bit/CRC/stuff error)");
        //     if (alerts & TWAI_ALERT_ABOVE_ERR_WARN) 
        //         ESP_LOGW("TWAI", "Error count > warning limit (96)");
        //     if (alerts & TWAI_ALERT_TX_FAILED) 
        //         ESP_LOGE("TWAI", "Transmit failed (arbitration lost or no ACK)");        
        // }

        // twai_status_info_t status;
        // twai_get_status_info(&status);
        // if (status.state == TWAI_STATE_BUS_OFF) {
        //     ESP_LOGE("TWAI", "Initiating recovery");
        //     // twai_initiate_recovery();
        // } else if (status.state == TWAI_STATE_STOPPED) {
        //     ESP_LOGE("TWAI", "Starting again");
        //     // twai_start();
        // }
        // ESP_LOGI("TWAI", "state: 0x%x, RX err: %ld, TX err: %ld", status.state, status.rx_error_counter, status.tx_error_counter);

        vTaskDelay(2000 / portTICK_PERIOD_MS);
    }
}